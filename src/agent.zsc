class ZGN_AgentProvider : Actor abstract {
    abstract void RefreshInputs(ZGN_NeuralNetwork net);
    abstract void ApplyOutputs(ZGN_NeuralNetwork net);
    abstract Actor GetActor();
    abstract double GetFitness();

    abstract bool IsAlive();
    abstract void Kill();

    virtual void Remove() {
        GetActor().Destroy();
    }

    virtual void Initialize(ZGN_Agent newAgent, Actor newActor) {}
    abstract Class<Actor> ActorType();

    abstract void NeuralNetworkParameters(out int inputs, out int outputs, out int hidden, out int numConnections);

    virtual ZGN_Population GetPopulation(Class<ZGN_SpawningStrategy> spawnStratType = "ZGN_DefaultSpawningStrategy") {
        ZGN_Ticker.Get(GetClass(), spawnStratType);
        return ZGN_Population.Get(GetClass(), spawnStratType);
    }
}

class ZGN_Agent : Actor {
    ZGN_AgentProvider impl;
    ZGN_NeuralNetwork net;

    static ZGN_Agent Make(ZGN_AgentProvider impl, ZGN_NeuralNetwork net) {
        let agent = ZGN_Agent(Spawn("ZGN_Agent"));
        agent.impl = impl;
        agent.net = net;

        ZGN_Population popInfo = impl.GetPopulation();

        return agent;
    }

    static ZGN_Agent MakeRandomNet(ZGN_AgentProvider impl, ZGN_NeuralNetwork model_net) {
        return Make(impl, ZGN_NeuralNetwork.make_random_like(model_net));
    }

    static private void CreateNewInit(out ZGN_AgentProvider provider, out Actor agentActor, out ZGN_Population popInfo, Class<ZGN_AgentProvider> implType, out ZGN_SpawningStrategy spawnStrat, Vector3V posv = null) {
        Vector3 pos;

        provider = ZGN_AgentProvider(Spawn(implType));

        if (spawnStrat == null) {
            popInfo = provider.GetPopulation();
            spawnStrat = popInfo.spawnStrat;
        }

        else {
            popInfo = provider.GetPopulation(spawnStrat.GetClass());
        }

        if (posv == null) {
            pos = spawnStrat.NextSpawnPos();
        }

        else {
            pos = posv.Get();
        }

        agentActor = provider.Spawn(provider.ActorType(), pos);
    }

    static ZGN_Agent CreateNewInitially(Class<ZGN_AgentProvider> implType, Vector3 pos) {
        ZGN_AgentProvider provider;
        Actor agentActor;
        ZGN_Population popInfo;
        ZGN_SpawningStrategy spawnStrat = null;

        Vector3V posv = Vector3V.Make(pos);
        CreateNewInit(provider, agentActor, popInfo, implType, spawnStrat, posv);
        posv.Destroy();

        spawnStrat.RegisterSpot(pos);
        agentActor.SetOrigin(pos, false);

        int inputs, outputs, hidden, numConnections;
        provider.NeuralNetworkParameters(inputs, outputs, hidden, numConnections);
        ZGN_NeuralNetwork net = ZGN_NeuralNetwork.make(inputs, outputs, hidden);
        net.connectRandomMany(numConnections);

        ZGN_Agent agent = ZGN_Agent.Make(provider, net);
        provider.Initialize(agent, agentActor);
        popInfo.AddAgent(agent);

        return agent;
    }

    static ZGN_Agent CreateNewWithNet(Class<ZGN_AgentProvider> implType, ZGN_NeuralNetwork net, ZGN_SpawningStrategy spawnStrat = null) {
        ZGN_AgentProvider provider;
        Actor agentActor;
        ZGN_Population popInfo;
        CreateNewInit(provider, agentActor, popInfo, implType, spawnStrat);

        ZGN_Agent agent = ZGN_Agent.Make(provider, net);
        provider.Initialize(agent, agentActor);
        popInfo.AddAgent(agent);

        return agent;
    }

    static ZGN_Agent CreateNewRandomNet(Class<ZGN_AgentProvider> implType, ZGN_SpawningStrategy spawnStrat = null) {
        ZGN_AgentProvider provider;
        Actor agentActor;
        ZGN_Population popInfo;
        CreateNewInit(provider, agentActor, popInfo, implType, spawnStrat);

        int inputs, outputs, hidden, numConnections;
        provider.NeuralNetworkParameters(inputs, outputs, hidden, numConnections);
        ZGN_NeuralNetwork net = ZGN_NeuralNetwork.make(inputs, outputs, hidden);
        net.connectRandomMany(numConnections);

        ZGN_Agent agent = ZGN_Agent.Make(provider, net);
        provider.Initialize(agent, agentActor);
        popInfo.AddAgent(agent);

        return agent;
    }

    void Update() {
        impl.RefreshInputs(net);

        net.ProcessValues();

        impl.ApplyOutputs(net);
    }

    Actor GetActor() {
        return impl.GetActor();
    }

    static ZGN_Agent Breed(ZGN_Agent mom, ZGN_Agent dad, ZGN_SpawningStrategy spawnStrat, float netMutateChance = 25, float connMutateAmount = 0.6) {
        ZGN_NeuralNetwork new_net = ZGN_NeuralNetwork.breed(mom.net, dad.net, netMutateChance, connMutateAmount);

        if (new_net == null) {
            return null;
        }

        return CreateNewWithNet(mom.impl.GetClass(), new_net, spawnStrat);
    }

    double GetFitness() {
        return impl.GetFitness();
    }

    bool IsAlive() {
        return impl.IsAlive();
    }

    void Kill() {
        impl.Kill();
    }

    void Remove() {
        impl.Remove();
    }
}
