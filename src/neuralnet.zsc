enum ZGN_NeuronType {
    NEU_ZERO, // ignore when set, 0 when get
    NEU_INPUTS,
    NEU_OUTPUTS,
    NEU_HIDDEN
};

enum ZGN_MutateType {
    MT_CONNVALUES,
    MT_NEWCONN,
    MT_KILLCONN
};

class ZGN_Connection {
    // Merely holds a connection from neuron to neuron.
    // Can't be struct because we have to store in an array.
    int from, to;
    int weight, offset;

    static ZGN_Connection make(int from, int to, int weight, int offset) {
        ZGN_Connection conn;
        conn = ZGN_Connection(new('ZGN_Connection'));

        conn.from = from;
        conn.to = to;
        conn.weight = weight;
        conn.offset = offset;

        return conn;
    }

    ZGN_Connection duplicate() {
        return ZGN_Connection.make(from, to, weight, offset);
    }

    void mutateWeights(float amount) {
        weight += FRandom(-amount, amount) * ZGN_NeuralNetwork.FIXUNIT;
        offset += FRandom(-amount, amount) * ZGN_NeuralNetwork.FIXUNIT;
    }
}

// Neuron index:
// - 2 least significant bits is a ZGN_NeuronType
// - right shifted by 2 is actual array index
class ZGN_NeuralNetwork {
    int num_inputs, num_outputs;
    int num_hidden;

    Array<int> inputs, outputs, hidden;
    Array<int> newHidden;
    Array<int> alreadyConnected;
    Array<ZGN_Connection> connections;

    static ZGN_NeuralNetwork make_random_like(ZGN_NeuralNetwork reference) {
        return make(reference.num_inputs, reference.num_outputs, reference.num_hidden);
    }

    static ZGN_NeuralNetwork make(int ninputs, int noutputs, int nhidden) {
        ZGN_NeuralNetwork nn = ZGN_NeuralNetwork(new('ZGN_NeuralNetwork'));

        nn.num_inputs = ninputs;
        nn.num_outputs = noutputs;
        nn.num_hidden = nhidden;

        int i;

        for (i = 0; i < ninputs; i++) {
            nn.inputs.Push(0);
        }

        for (i = 0; i < noutputs; i++) {
            nn.outputs.Push(0);
        }

        for (i = 0; i < nhidden; i++) {
            nn.hidden.Push(0);
        }

        return nn;
    }

    void neuronGet(int ref, out int value) {
        int index = ref >> 2;
        ZGN_NeuronType type = ref & 0x3;

        switch (type) {
            case NEU_INPUTS:
            value = inputs[index];
            break;

            case NEU_OUTPUTS:
            value = outputs[index];
            break;

            case NEU_HIDDEN:
            value = hidden[index];
            break;

            case NEU_ZERO:
            value = 0;
            break;
        }
    }

    void neuronSet(int ref, int newValue) {
        int index = ref >> 2;
        ZGN_NeuronType type = ref & 0x3;

        switch (type) {
            case NEU_INPUTS:
            inputs[index] = newValue;
            break;

            case NEU_OUTPUTS:
            outputs[index] = newValue;
            break;

            case NEU_HIDDEN:
            hidden[index] = newValue;
            break;

            case NEU_ZERO:
            break;
        }
    }

    void neuronAdd(int ref, int addValue) {
        int index = ref >> 2;
        ZGN_NeuronType type = ref & 0x3;

        switch (type) {
            case NEU_INPUTS:
            inputs[index] += addValue;
            break;

            case NEU_OUTPUTS:
            outputs[index] += addValue;
            break;

            case NEU_HIDDEN:
            hidden[index] += addValue;
            break;

            case NEU_ZERO:
            break;
        }
    }

    void neuronAddTemp(int ref, int addValue) {
        int index = ref >> 2;
        ZGN_NeuronType type = ref & 0x3;

        switch (type) {
            case NEU_OUTPUTS:
            outputs[index] += addValue;
            break;

            case NEU_HIDDEN:
            newHidden[index] += addValue;
            break;
        }
    }

    bool AddConnection(ZGN_Connection conn) {
        if (alreadyConnected.Find(conn.from << 16 || conn.to) != -1) {
            return false;
        }

        connections.Push(conn);
        return true;
    }

    void RemoveConnection(int which) {
        let conn = connections[which];
        alreadyConnected.Delete(alreadyConnected.Find(conn.from << 16 || conn.to));
        connections.Delete(which);
    }

    ZGN_Connection connect(int from, int to) {
        ZGN_NeuronType fromType = from & 0x3;
        ZGN_NeuronType toType = to & 0x3;

        if (fromType == NEU_ZERO || toType == NEU_ZERO || toType == NEU_INPUTS || fromType == NEU_OUTPUTS) {
            return null;
        }

        ZGN_Connection newConn = ZGN_Connection.make(from, to, FRandom(-4, 4) * FIXUNIT, FRandom(-1, 1) * FIXUNIT);
        AddConnection(newConn);

        return newConn;
    }

    ZGN_Connection connectWeight(int from, int to, int weight, int offset) {
        ZGN_NeuronType fromType = from & 0x3;
        ZGN_NeuronType toType = to & 0x3;

        if (fromType == NEU_ZERO || toType == NEU_ZERO || toType == NEU_INPUTS || fromType == NEU_OUTPUTS) {
            return null;
        }

        ZGN_Connection newConn = ZGN_Connection.make(from, to, weight, offset);
        connections.Push(newConn);

        return newConn;
    }

    void process_values() {
        newHidden.Copy(hidden);

        for (int oi = 0; oi < num_outputs; oi++) {
            outputs[oi] = 0;
        }

        ZGN_Connection conn;
        int ci, val;

        for (ci = 0; ci < connections.Size(); ci++) {
            conn = connections[ci];

            neuronGet(conn.from, val);
            val = val * conn.weight / FIXUNIT + conn.offset;

            if (val < 0) {
                // asymmetry is fun!
                val /= 4;
            }

            neuronAddTemp(conn.to, val * FIXUNIT / (FIXUNIT + abs(val)));
        }

        hidden.move(newHidden);
    }

    /*void update() {
    agent.refreshInputs(self);

    process_values();

    agent.applyOutputs(self);
    }*/

    override void OnDestroy() {
        int i;

        for (i = 0; i < connections.Size(); i++) {
            connections[i].Destroy();
        }

        connections.Clear();
    }

    ZGN_Connection connectRandom() {
        int fromType = (Random(0, 1) == 0) ? NEU_INPUTS : NEU_HIDDEN;
        int toType = (Random(0, 2) == 0) ? NEU_OUTPUTS : NEU_HIDDEN;

        int fromIdx, toIdx;

        switch (fromType) {
            case NEU_INPUTS:	fromIdx = Random(0, num_inputs - 1);	break;
            case NEU_HIDDEN:	fromIdx = Random(0, num_hidden - 1);	break;
        }

        switch (toType) {
            case NEU_OUTPUTS:	toIdx = Random(0, num_outputs - 1);	break;
            case NEU_HIDDEN:	toIdx = Random(0, num_hidden - 1);	break;
        }

        return connect(fromIdx << 2 | fromType, toIdx << 2 | toType);
    }

    static ZGN_NeuralNetwork breed(ZGN_NeuralNetwork mom, ZGN_NeuralNetwork dad, float netMutateChance = 25, float connMutateAmount = 0.6) {
        if (mom == null) {
            if (dad == null) {
                // should cause a fatal error (like an assertion error), but eh
                return null;
            }

            return dad.replicate(netMutateChance, connMutateAmount);
        }

        if (dad == null) {
            if (mom != null) {
                // should cause a fatal error (like an assertion error), but eh
                return null;
            }

            return mom.replicate(netMutateChance, connMutateAmount);
        }

        ZGN_NeuralNetwork newNet = mom.replicate(0, 0);

        if (newNet == null) {
            return null;
        }

        int numconn_A = mom.connections.Size();
        int numconn_B = dad.connections.Size();
        int totNumConn = numconn_A + numconn_B;

        while (newNet.connections.Size() * 4 > totNumConn) {
            int idx = Random(0, newNet.connections.Size() - 1);
            newNet.connections.Delete(idx);
        }

        while (newNet.connections.Size() * 2 < totNumConn) {
            int source_idx = Random(0, dad.connections.Size() - 1);
            newNet.connections.Push(dad.connections[source_idx].duplicate());
        }

        newNet.ApplyMutation(netMutateChance, connMutateAmount);

        return newNet;
    }

    void ApplyMutation(float netMutateChance = 25, float connMutateAmount = 0.6) {
        bool bMutate = FRandom(0, 100) < netMutateChance;

        if (!bMutate) {
            return;
        }

        // Handle mutation.
        ZGN_MutateType mtype = Random(0, 3); // MNT: update whenever ZGN_MutateType is changed
        int which;

        switch (mtype) {
            case MT_CONNVALUES:
                which = Random(0, connections.Size() - 1);

                connections[which].mutateWeights(connMutateAmount);

                break;

            case MT_NEWCONN:
                connectRandom();

                break;

            case MT_KILLCONN:
                which = Random(0, connections.Size() - 1);
                RemoveConnection(which);

                break;
        }
    }

    ZGN_NeuralNetwork replicate(float netMutateChance = 25, float connMutateAmount = 0.6) {
        // make a duplicate of this network.
        ZGN_NeuralNetwork newNet = ZGN_NeuralNetwork.make(num_inputs, num_outputs, num_hidden);

        int ci;

        for (ci = 0; ci < connections.Size(); ci++) {
            newNet.connections.Push(connections[ci].duplicate());
        }

        newNet.ApplyMutation(netMutateChance, connMutateAmount);

        return newNet;
    }
}
