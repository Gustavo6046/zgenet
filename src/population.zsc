class ZGN_PopulationScoreboard {
    Array<ZGN_Agent> ranked;
    Array<double> fitnesses;

    bool IsSorted() {
        double earlier = fitnesses[0];
        int i = 1;

        while (i < fitnesses.Size()) {
            if (fitnesses[i] > earlier) {
                return false;
            }

            earlier = fitnesses[i];
            i++;
        }

        return true;
    }

    void UpdateFitnesses() {
        for (int i = 0; i < ranked.Size(); i++) {
            fitnesses[i] = ranked[i].GetFitness();
        }

        Sort();
    }

    void Sort() {
        bool sorted = false;

        while (!sorted) {
            sorted = true;

            for (int swapPos = 0; swapPos < fitnesses.Size() - 1; swapPos++) {
                double earlier = fitnesses[swapPos];

                if (earlier > fitnesses[swapPos + 1]) {
                    sorted = false; // more sorting may be necessary

                    fitnesses[swapPos] = fitnesses[swapPos + 1];
                    fitnesses[swapPos + 1] = earlier;

                    let earlierVal = ranked[swapPos];
                    ranked[swapPos] = ranked[swapPos + 1];
                    ranked[swapPos + 1] = earlierVal;
                }
            }
        }
    }
}

class ZGN_Population : Thinker {
    Class<ZGN_AgentProvider> agentType;
    ZGN_SpawningStrategy spawnStrat;

    double averageFitness;
    int countedFitnesses;
    int population;
    Array<ZGN_Agent> agents;
    Array<bool> activated;
    int generation;
    int num_activated;
    bool repopulationPending;

    ZGN_PopulationScoreboard scoreboard;
    ZGN_NeuralNetwork model_net;

    // Hyperparameters
    int targetPop;
    float bredRepopulation;
    float survivalThreshold, reproductionThreshold;
    float netMutateChance;
    float connMutateAmount;

    void ConfigureSpawning(Class<ZGN_SpawningStrategy> newSpawnStrat) {
        if (spawnStrat != null) {
            spawnStrat.Destroy();
        }

        spawnStrat = ZGN_SpawningStrategy(new(newSpawnStrat));
    }

    void ConfigureHyperparameters(
            // MNT: set hyperparameter values here!
            int targetPop = 50,
            float bredRepopulation = 0.8,
            float survivalThreshold = 0.1,
            float reproductionThreshold = 0.15,
            float netMutateChance = 25,
            float connMutateAmount = 0.3) {
        self.targetPop = targetPop;
        self.bredRepopulation = bredRepopulation;
        self.survivalThreshold = survivalThreshold;
        self.reproductionThreshold = reproductionThreshold;
        self.netMutateChance = netMutateChance;
        self.connMutateAmount = connMutateAmount;
    }

    void ConfigureModelNet(int inputs, int outputs, int hidden) {
        if (model_net != null) {
            model_net.Destroy();
        }

        model_net = ZGN_NeuralNetwork.make(inputs, outputs, hidden);
    }

    void Init(Class<ZGN_AgentProvider> agentType, Class<ZGN_SpawningStrategy> spawnStratType = "ZGN_DefaultSpawningStrategy") {
        ChangeStatNum(76);

        averageFitness = 0;
        population = 0;
        generation = 1;
        scoreboard = New("ZGN_PopulationScoreboard");

        ConfigureHyperparameters();
        ConfigureSpawning(spawnStratType);

        self.agentType = agentType;

        int inputs, outputs, hidden;
    }

    static ZGN_Population Get(Class<ZGN_AgentProvider> agentType, Class<ZGN_SpawningStrategy> spawnStratType = "ZGN_DefaultSpawningStrategy") {
        ThinkerIterator it = ThinkerIterator.Create("ZGN_Population", 76);
        ZGN_Population p;

        while ((p = ZGN_Population(it.Next())) != null) {
            if (p.agentType == agentType && p.spawnStrat != null && p.spawnStrat.GetClass() is spawnStratType) {
                break;
            }
        }

        if (p == null) {
            p = ZGN_Population(New("ZGN_Population"));
            p.Init(agentType, spawnStratType);
        }

        return p;
    }

    void RemoveAgent(ZGN_Agent agent) {
        let oldfit = agent.GetFitness();
        let idx = agents.Find(agent);

        if (activated[idx]) {
            num_activated--;
        }

        population--;

        agents.Delete(idx);
        activated.Delete(idx);

        int scoreIdx = scoreboard.ranked.Find(agent);
        scoreboard.ranked.Delete(scoreIdx);
        scoreboard.fitnesses.Delete(scoreIdx);

        RemoveAverageFitness(oldfit);
        Repopulate();
    }

    private void UpdateAverageFitness(double from, double to, int asHowMany = 1) {
        averageFitness = (averageFitness * countedFitnesses + (to - from) * asHowMany) / countedFitnesses;
    }

    void UpdateFitness(ZGN_Agent agent) {
        let scoreIdx = scoreboard.ranked.Find(agent);
        let oldFit = scoreboard.fitnesses[scoreIdx];
        let newFit = agent.GetFitness();

        if (oldFit != newFit) {
            scoreboard.fitnesses[scoreIdx] = newFit;
            UpdateAverageFitness(oldFit, newFit);
            scoreboard.Sort();
        }
    }

    void AddAverageFitness(double counted) {
        averageFitness = (averageFitness * countedFitnesses + counted) / (countedFitnesses + 1);
        countedFitnesses += 1;
    }

    void RemoveAverageFitness(double uncounted) {
        let prevNum = countedFitnesses;

        if (prevNum <= 1) {
            countedFitnesses = 0;
            averageFitness = 0;
        }

        else {
            countedFitnesses -= 1;
            averageFitness = (averageFitness * prevNum - uncounted) / countedFitnesses;
        }
    }

    void AddAgent(ZGN_Agent agent, bool bSort = true) {
        let fitness = agent.GetFitness();
        let prevNum = agents.Size();

        agents.Push(agent);
        activated.Push(true);
        num_activated++;
        population++;

        scoreboard.ranked.Push(agent);
        scoreboard.fitnesses.Push(fitness);

        AddAverageFitness(fitness);

        if (bSort) {
            scoreboard.Sort();
        }
    }

    void Activate(ZGN_Agent agent) {
        let idx = agents.Find(agent);

        if (activated[idx]) {
            return;
        }

        activated[idx] = true;
        num_activated++;

        scoreboard.ranked.Push(agent);
        scoreboard.fitnesses.Push(agent.GetFitness());
        scoreboard.Sort();
    }

    void Deactivate(ZGN_Agent agent) {
        let idx = agents.Find(agent);

        if (!activated[idx]) {
            return;
        }

        activated[idx] = false;
        num_activated--;

        Repopulate();
    }

    void KillLivingAgents() {
        for (int i = 0; i < agents.Size(); i++) {
            if (agents[i].IsAlive()) {
                agents[i].Kill();
            }
        }
    }

    void CullUndesirable() {
        int cullIndex = scoreboard.ranked.Size() * reproductionThreshold + 1;
        int cullCap = scoreboard.ranked.Size();

        while (cullIndex < cullCap) {
            let agent = scoreboard.ranked[cullIndex];
            RemoveAgent(agent);
            agent.Remove();
            cullCap -= 1;
        }
    }

    bool BreedNew() {
        int maxBreeder = population - 1;

        if (maxBreeder > targetPop * survivalThreshold + 1) {
            maxBreeder = targetPop * survivalThreshold + 1;
        }

        int momIdx = Random(0, maxBreeder);
        int dadIdx = momIdx;

        if (population >= 2) {
            while (dadIdx == momIdx) {
                dadIdx = Random(0, maxBreeder);
            }
        }

        ZGN_Agent agent = ZGN_Agent.Breed(scoreboard.ranked[momIdx], scoreboard.ranked[dadIdx], spawnStrat, netMutateChance, connMutateAmount);
        return (agent != null);
    }

    bool RandomNew() {
        ZGN_Agent res = ZGN_Agent.CreateNewRandomNet(agentType, spawnStrat);

        if (res == null) {
            return false;
        }

        return true;
    }

    void UpdateFitnesses() {
        averageFitness = 0;
        int count = 0;

        for (int i = 0; i < agents.Size(); i++) {

            let agent = agents[i];
            let fitness = agent.GetFitness();
            let scoreIdx = scoreboard.ranked.Find(agent);

            if (!activated[i]) {
                continue;
            }

            scoreboard.fitnesses[scoreIdx] = fitness;
            averageFitness += fitness;
            count += 1;
        }

        averageFitness /= count;
        countedFitnesses = count;

        scoreboard.Sort();
    }

    override void Tick() {
        if (repopulationPending) {
            DoRepopulate();
        }
    }

    void Repopulate() {
        if (repopulationPending) {
            return;
        }

        if (num_activated > targetPop * survivalThreshold && num_activated > 0) {
            return;
        }

        repopulationPending = true;
    }

    void DoRepopulate() {
        KillLivingAgents();
        scoreboard.UpdateFitnesses();
        CullUndesirable();

        int bredPop = targetPop * bredRepopulation;

        console.printf(
            "Repopulating agents; generation %i is done (will breed %i more and create %i random)",
                generation,
                bredPop - num_activated - (population >= 2 ? 0 : (2 - population)),
                targetPop - bredPop + (population >= 2 ? 0 : (2 - population))
        );

        generation += 1;

        while (population < 2) {
            if (!RandomNew()) {
                console.printf("heck\n");
                return;
            }
        }

        while (num_activated < bredPop) {
            if (!BreedNew()) {
                console.printf("heck\n");
                break;
            }
        }

        while (num_activated < targetPop) {
            if (!RandomNew()) {
                console.printf("heck\n");
                break;
            }
        }

        repopulationPending = false;
    }
}
