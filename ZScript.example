#include "zgenet.zsc"

class GeneZombie : Actor {
    override void BeginPlay() {
        ZGN_Agent.CreateNewInitially("GeneZombieAgent", pos);
        Destroy();
    }
}

class ThruSpeciesBulletPuff : BulletPuff {
    default {
        +MTHRUSPECIES;
    }
}

class GeneZombieActor : ZombieMan {
    GeneZombieAgent agentProvider;
    bool ready;
    bool firing;
    int lastTargetHealth;
    double fitness;
    bool counted;

    int hits;
    int selfDamage;
    double aimScore;
    double sightScore;

    private double lastFitness;
    private int lastSelfHealth;

    ZGN_Population popInfo;


    default {
        +THRUSPECIES;
        +LOOKALLAROUND;
        +NOINFIGHTSPECIES;
        +FRIENDLY;
        -COUNTKILL;
        Species "GeneZombie";
    }

    void lookAhead(out bool bWall, out bool bTarget, out bool bFriend, out double proximity, double distance = 1024) {
        FLineTraceData RemoteRay;
        bool hit = LineTrace(
           angle,
           distance,
           pitch,
           offsetz: height-12,
           data: RemoteRay
        );

        if (!hit) {
           return;
        }

        proximity = 1024.0 / (1024 + RemoteRay.Distance);
        proximity *= proximity * proximity;

        if (RemoteRay.HitType == TRACE_HitWall) {
            bWall = true;
        }

        else if (RemoteRay.HitType != TRACE_HitActor) {
            return;
        }

        if (GeneZombie(RemoteRay.HitActor) != null) {
            bFriend = true;
        }

        if (RemoteRay.HitActor == target && target != null) {
            bTarget = true;
        }
    }

    override void BeginPlay() {
        Super.BeginPlay();

        InitVars();
        GetPopInfo();
    }

    private void GetPopInfo() {
        popInfo = ZGN_Population.Get("GeneZombieAgent");
    }

    private void InitVars() {
        fitness = 0.0;
        counted = true;
        lastFitness = 0.0;
        aimScore = 0.0;
        selfDamage = 0;
        hits = 0;
        lastTargetHealth = 0.0;
        firing = false;
        ready = false;
    }

    private void UpdateFitness() {
        if (!counted) {
            return;
        }

        RecalculateFitness();
    }

    private void RecalculateFitness() {
        fitness = hits * 2;
        fitness -= selfDamage / 2;
        fitness += aimScore;
        fitness += sightScore;
    }

    private void ScoreDamage() {
        if (health != lastSelfHealth) {
            selfDamage += lastSelfHealth - health;
            lastSelfHealth = health;
        }
    }

    private void ScoreSight() {
        if (target == null) {
            return;
        }

        if (!CheckSight(target)) {
            sightScore -= 0.07;
        }
    }

    private void ScoreAim() {
        if (target == null) {
            return;
        }

        if (AbsAngle(angle, AngleTo(target)) < 20) {
            aimScore += 0.04;
        }

        else if (AbsAngle(angle, AngleTo(target)) > 90) {
            aimScore -= 0.01;
        }
    }

    void SelfState(int isReady, int isFiring = 0) {
        ready = isReady == 1;
        firing = isfiring == 1;
    }

    private void UncountFromPop() {
        popInfo.Deactivate(agentProvider.agent);
    }

    private void RecountIntoPop() {
        popInfo.Activate(agentProvider.agent);
    }

    void UpdateState() {
        if (health <= 0) {
            SetStateLabel("Death");
            return;
        }

        if (!ready) {
            return;
        }

        ScoreAim();
        ScoreSight();
        ScoreDamage();

        UpdateFitness();

        // lifetime
        if (Random(0, 10) > 0) {
            return;
        }

        health -= 1;
        lastSelfHealth -= 1;

        if (health <= 0) {
            SetStateLabel("Death");
            return;
        }
    }

    void CheckTargetHealth() {
        if (target == null) {
            lastTargetHealth = 0;
            return;
        }

        lastTargetHealth = target.health;
    }

    void CheckFireScore() {
        if (target == null) {
            return;
        }

        int damage = lastTargetHealth - target.health;

        if (damage <= 0) {
            return;
        }

        hits += 1;
        UpdateFitness();
    }

    virtual void ShootAtEnemy() {
        A_CustomBulletAttack(4.5, 0, 1, random(1,5)*3, "ThruSpeciesBulletPuff", 0, CBAF_NORANDOM | CBAF_AIMFACING);
    }

    states {
        See:
            POSS A 0 SelfState(1);
            goto SeeLoop;

        SeeLoop:
            POSS A 0 CheckTargetHealth;
            POSS AABBCCDD 4 UpdateState;
            loop;

        Missile:
            POSS E 0 SelfState(0, 1);
            POSS EE 4 UpdateState;

            POSS F 0 CheckTargetHealth;
            POSS F 0 ShootAtEnemy;
            POSS F 0 CheckFireScore;

            POSS FF 3 UpdateState;
            POSS EE 3 UpdateState;
            goto See;

        Death:
            POSS M 1;
            POSS M 0 SelfState(0);
            POSS M 0 UncountFromPop;
            goto Super::Death;

        XDeath:
            POSS H 1;
            POSS H 0 SelfState(0);
            POSS H 0 UncountFromPop;
            goto Super::XDeath;

        Raise:
            POSS K 0 RecountIntoPop;
            goto Super::Raise;
    }
}

class GeneZombieAgent : ZGN_AgentProvider {
    GeneZombieActor myZombie;
    ZGN_Agent agent;
    int age;

    override bool IsAlive() {
        return myZombie.Health > 0;
    }

    override void Kill() {
        myZombie.Health = 0;
        myZombie.firing = false;
        myZombie.SetStateLabel("Death");
    }

    override Actor GetActor() {
        return myZombie;
    }

    override double GetFitness() {
        return myZombie.fitness;
    }

    override Class<Actor> ActorType() {
        return "GeneZombieActor";
    }

    override void Initialize(ZGN_Agent newAgent, Actor newZombie) {
        myZombie = GeneZombieActor(newZombie);
        myZombie.angle = FRandom(0, 360);
        myZombie.agentProvider = self;
        agent = newAgent;
        age = 0;
    }

    override void NeuralNetworkParameters(out int inputs, out int outputs, out int hidden, out int numConnections) {
        inputs = 26;
        outputs = 10;
        hidden = 30;
        numConnections = 40;
    }

    //====
    // here's some interesting code
    // it translates between neural network inputs and outputs and
    // the state and actions of the actual zombie actor
    override void RefreshInputs(ZGN_NeuralNetwork net) {
        net.inputs[0] = myZombie.health * ZGenet.FIXUNIT / myZombie.SpawnHealth();

        double ageval = age;
        ageval /= 80.0;

        // oscillator neurons
        net.inputs[8] = sin(ageval) * ZGenet.FIXUNIT;
        net.inputs[9] = sin(ageval / 8) * ZGenet.FIXUNIT;

        // am firing?
        net.inputs[15] = (myZombie.firing ? ZGenet.FIXUNIT : 0);

        if (myZombie.target == null) {
            net.inputs[1] = 0;

            net.inputs[2] = 0;
            net.inputs[3] = 0;

            net.inputs[4] = 0;
            net.inputs[12] = 0;

            net.inputs[5] = 0;
            net.inputs[6] = 0;

            net.inputs[7] = 0;

            net.inputs[10] = 0;
            net.inputs[11] = 0;
        }

        else {
            Vector2 enemyOffs = myZombie.Vec2To(myZombie.target);
            double toEnemyAng = atan2(enemyOffs.y, enemyOffs.x);
            double fromEnemyAng = atan2(-enemyOffs.y, -enemyOffs.x);

            // offset of self aim from enemy
            net.inputs[1] = DeltaAngle(myZombie.angle, toEnemyAng) * ZGenet.FIXUNIT / 100;

            // enemy health
            net.inputs[2] = myZombie.target.health * ZGenet.FIXUNIT / myZombie.target.SpawnHealth();
            net.inputs[3] = (myZombie.target.SpawnHealth() - myZombie.target.health) * ZGenet.FIXUNIT / myZombie.target.SpawnHealth();

            // enemy visible
            net.inputs[4] = myZombie.CheckSight(myZombie.target) ? ZGenet.FIXUNIT : 0;
            net.inputs[12] = myZombie.CheckSight(myZombie.target) ? 0 : ZGenet.FIXUNIT;

            // enemy in self sights
            net.inputs[5] = 30 * ZGenet.FIXUNIT / (8 + AbsAngle(myZombie.angle, toEnemyAng) / 1.2);

            // self in enemy sights
            net.inputs[6] = 40 * ZGenet.FIXUNIT / (10 + AbsAngle(myZombie.target.angle, fromEnemyAng) / 1.5);

            // has enemy at all
            net.inputs[7] = ZGenet.FIXUNIT;

            // distance and nearness from enemy
            net.inputs[10] = myZombie.Distance2D(myZombie.target) * ZGenet.FIXUNIT / 1024;
            net.inputs[11] = (1024.0 / (500 + myZombie.Distance2D(myZombie.target)) * 1.5) * ZGenet.FIXUNIT;

            // velocity (fast and slow, respectively)
            double velforce = sqrt((myZombie.vel.x * myZombie.vel.x) + (myZombie.vel.y * myZombie.vel.y));
            net.inputs[13] = velforce * ZGenet.FIXUNIT / 5;
            net.inputs[14] = (8.0 / (1.0 + velforce)) * ZGenet.FIXUNIT / 5;
        }

        // == lookAhead inputs
        InputLookAhead(net, 300, 16);
        InputLookAhead(net, 1200, 21);
    }

    private void InputLookAhead(ZGN_NeuralNetwork net, double distance, int offset) {
        bool bWall;.
        bool bTarget;
        bool bFriend;
        double proximity;

        myZombie.lookAhead(bWall, bTarget, bFriend, proximity, distance);

        net.inputs[offset] = (bWall ? ZGenet.FIXUNIT : 0);
        net.inputs[offset + 1] = (bTarget ? ZGenet.FIXUNIT : 0);
        net.inputs[offset + 2] = (bFriend ? ZGenet.FIXUNIT : 0);
        net.inputs[offset + 3] = proximity * ZGenet.FIXUNIT;
        net.inputs[offset + 4] = (1.0 - proximity) * ZGenet.FIXUNIT;
    }

    override void ApplyOutputs(ZGN_NeuralNetwork net) {
        // apply move
        double forward = net.outputs[1];
        double backward = net.outputs[2];
        double sideward = net.outputs[3];
        double resideward = net.outputs[4];

        double forward_x = cos(myZombie.angle);
        double forward_y = sin(myZombie.angle);

        if (abs(forward - backward) > ZGenet.FIXUNIT / 5) {
            myZombie.vel.x += forward_x * (forward - backward) / ZGenet.FIXUNIT * 4;
            myZombie.vel.y += forward_y * (forward - backward) / ZGenet.FIXUNIT * 4;
        }

        if (abs(sideward - resideward) > ZGenet.FIXUNIT / 7) {
            myZombie.vel.x += forward_y * (sideward - resideward) / ZGenet.FIXUNIT * 4;
            myZombie.vel.y += -forward_x * (sideward - resideward) / ZGenet.FIXUNIT * 4;
        }

        // apply turn
        myZombie.angle += (net.outputs[0] - net.outputs[6]) * 9 / ZGenet.FIXUNIT;

        // apply pitch
        double pitchMove = (net.outputs[8] - net.outputs[9]) * 1.0 / ZGenet.FIXUNIT * 2;

        myZombie.pitch += pitchMove;
        myZombie.pitch -= myZombie.pitch * 0.15; // soft lookspring

        // if applicable, fire!
        if (myZombie.ready && net.outputs[5] > ZGenet.FIXUNIT * 3 / 4) {
            myZombie.SetStateLabel("Missile");
        }
    }
}
